import os
import re
import json
import logging
from typing import Tuple

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import aiohttp

logging.basicConfig(level=logging.INFO)

# ========= Simple in-memory user prefs (per-process) =========
user_lang = {}  # user_id -> "en" | "ru"

# ========= Utils =========
CYRILLIC_RE = re.compile(r"[–ê-–Ø–∞-—è–Å—ë]")

def pick_direction(text: str) -> Tuple[str, str]:
    """Decide EN->RU or RU->EN based on presence of Cyrillic."""
    if CYRILLIC_RE.search(text):
        return "ru", "en"
    return "en", "ru"

async def lt_translate(session: aiohttp.ClientSession, text: str) -> str:
    """Translate via LibreTranslate (no API key assumed)."""
    text = (text or "").strip()
    if not text:
        return "Nothing to translate."
    source, target = pick_direction(text)
    payload = {"q": text, "source": source, "target": target, "format": "text"}
    try:
        async with session.post(TRANSLATE_URL, data=payload, timeout=TRANSLATE_TIMEOUT) as resp:
            if resp.status != 200:
                body = await resp.text()
                return f"‚ö†Ô∏è Translation error ({resp.status}): {body[:300]}"
            data = await resp.json()
            if isinstance(data, dict) and "translatedText" in data:
                return data["translatedText"]
            return json.dumps(data, ensure_ascii=False)
    except Exception as e:
        return f"‚ö†Ô∏è Translation failed: {e}"

def t(uid: int, en: str, ru: str) -> str:
    """Bilingual UI helper."""
    return ru if user_lang.get(uid, "en") == "ru" else en

# ========= Command registration =========
async def set_bot_commands() -> None:
    en_cmds = [
        types.BotCommand("start", "Start SpeakEasy"),
        types.BotCommand("help", "How to use the bot"),
        types.BotCommand("lang", "Switch interface language (EN/RU)"),
        types.BotCommand("translate", "Translate a word or phrase (EN‚áÑRU)"),
        types.BotCommand("settings", "View your settings"),
        types.BotCommand("about", "About the bot"),
        types.BotCommand("cancel", "Cancel current action"),
        types.BotCommand("health", "Health check (admin)"),
    ]
    ru_cmds = [
        types.BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        types.BotCommand("help", "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"),
        types.BotCommand("lang", "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (EN/RU)"),
        types.BotCommand("translate", "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É (EN‚áÑRU)"),
        types.BotCommand("settings", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
        types.BotCommand("about", "–û –±–æ—Ç–µ"),
        types.BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
        types.BotCommand("health", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"),
    ]
    # Default list (no language code) = EN
    await bot.set_my_commands(en_cmds, scope=types.BotCommandScopeDefault())
    # RU localization
    await bot.set_my_commands(ru_cmds, scope=types.BotCommandScopeDefault(), language_code="ru")

# ========= Handlers =========
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    uid = message.from_user.id
    # Initialize interface language from Telegram settings
    user_lang[uid] = "ru" if (message.from_user.language_code or "").startswith("ru") else "en"
    greeting = t(
        uid,
        "üëã Welcome to <b>SpeakEasy</b> (@BlaBlaEnglishBot)! I help you learn English in a fun, practical way.\n\n"
        "‚Ä¢ Use <code>/lang</code> to switch my interface (EN/RU)\n"
        "‚Ä¢ Use <code>/translate</code> + text or reply to a message to translate (EN‚áÑRU)\n"
        "‚Ä¢ See all commands: <code>/help</code>",
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ <b>SpeakEasy</b> (@BlaBlaEnglishBot). –ü–æ–º–æ–≥–∞—é —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ª–µ–≥–∫–æ –∏ —Å –∫–∞–π—Ñ–æ–º.\n\n"
        "‚Ä¢ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: <code>/lang</code>\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥: <code>/translate</code> + —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (EN‚áÑRU)\n"
        "‚Ä¢ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã: <code>/help</code>",
    )
    await message.reply(greeting)

@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    uid = message.from_user.id
    text = t(
        uid,
        "üß≠ <b>Help</b>\n"
        "‚Ä¢ <code>/start</code> ‚Äî start the bot\n"
        "‚Ä¢ <code>/help</code> ‚Äî show this help\n"
        "‚Ä¢ <code>/lang</code> ‚Äî switch interface language (EN/RU)\n"
        "‚Ä¢ <code>/translate</code> <i>text</i> ‚Äî translate a word/phrase (EN‚áÑRU), or reply to a message with /translate\n"
        "‚Ä¢ <code>/settings</code> ‚Äî view current settings\n"
        "‚Ä¢ <code>/about</code> ‚Äî about the bot\n"
        "‚Ä¢ <code>/cancel</code> ‚Äî cancel current action\n"
        "‚Ä¢ <code>/health</code> ‚Äî health check (admin only)",
        "üß≠ <b>–ü–æ–º–æ—â—å</b>\n"
        "‚Ä¢ <code>/start</code> ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ <code>/help</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
        "‚Ä¢ <code>/lang</code> ‚Äî —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (EN/RU)\n"
        "‚Ä¢ <code>/translate</code> <i>—Ç–µ–∫—Å—Ç</i> ‚Äî –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã (EN‚áÑRU), –ª–∏–±–æ –æ—Ç–≤–µ—Ç—å—Ç–µ /translate –Ω–∞ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ <code>/settings</code> ‚Äî —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "‚Ä¢ <code>/about</code> ‚Äî –æ –±–æ—Ç–µ\n"
        "‚Ä¢ <code>/cancel</code> ‚Äî –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è\n"
        "‚Ä¢ <code>/health</code> ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)",
    )
    await message.reply(text)

@dp.message_handler(commands=["lang"])
async def cmd_lang(message: types.Message):
    uid = message.from_user.id
    cur = user_lang.get(uid, "en")
    user_lang[uid] = "ru" if cur == "en" else "en"
    txt = t(uid, "Language set to English üá∫üá∏", "–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: —Ä—É—Å—Å–∫–∏–π üá∑üá∫")
    await message.reply(txt)

@dp.message_handler(commands=["settings"])
async def cmd_settings(message: types.Message):
    uid = message.from_user.id
    lang_name = "English üá∫üá∏" if user_lang.get(uid, "en") == "en" else "–†—É—Å—Å–∫–∏–π üá∑üá∫"
    txt = t(
        uid,
        f"‚öôÔ∏è <b>Settings</b>\n‚Ä¢ Interface: {lang_name}\n‚Ä¢ Translate: on-demand via /translate",
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {lang_name}\n‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥: –ø–æ –∑–∞–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ /translate",
    )
    await message.reply(txt)

@dp.message_handler(commands=["about"])
async def cmd_about(message: types.Message):
    uid = message.from_user.id
    txt = t(
        uid,
        "üìö <b>SpeakEasy (@BlaBlaEnglishBot)</b>\nFun English practice + quick EN‚áÑRU translation.\nPrivacy: type /help to learn more.",
        "üìö <b>SpeakEasy (@BlaBlaEnglishBot)</b>\n–í–µ—Å—ë–ª—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π + –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥ EN‚áÑRU.\n–ü—Ä–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å —Å–º. /help.",
    )
    await message.reply(txt)

@dp.message_handler(commands=["cancel"])
async def cmd_cancel(message: types.Message):
    uid = message.from_user.id
    txt = t(uid, "‚úÖ Nothing to cancel. You‚Äôre all set.", "‚úÖ –û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ. –í—Å—ë –æ–∫.")
    await message.reply(txt)

@dp.message_handler(commands=["health"])
async def cmd_health(message: types.Message):
    uid = message.from_user.id
    if uid != ADMIN_ID:
        await message.reply("üö´ Admins only.")
        return
    try:
        me = await bot.get_me()
        await message.reply(
            f"‚úÖ Bot OK\n"
            f"‚Ä¢ name: {me.first_name}\n"
            f"‚Ä¢ username: @{me.username}\n"
            f"‚Ä¢ polling: active"
        )
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è Health error: {e}")

@dp.message_handler(commands=["translate"])
async def cmd_translate(message: types.Message):
    uid = message.from_user.id
    # Use replied text first; else arguments after /translate
    src_text = None
    if message.reply_to_message and (message.reply_to_message.text or message.reply_to_message.caption):
        src_text = (message.reply_to_message.text or message.reply_to_message.caption).strip()
    else:
        src_text = message.get_args().strip() if message.get_args() else ""

    if not src_text:
        prompt = t(uid, "Reply to a message or type: /translate your text",
                        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: /translate –≤–∞—à —Ç–µ–∫—Å—Ç")
        await message.reply(prompt)
        return

    async with aiohttp.ClientSession() as session:
        translated = await lt_translate(session, src_text)
    await message.reply(f"<b>‚Üí</b> {translated}")

@dp.message_handler(lambda m: m.text and m.text.lower().startswith("translate "))
async def freeform_translate(message: types.Message):
    text = message.text[9:].strip()
    if not text:
        return
    async with aiohttp.ClientSession() as session:
        translated = await lt_translate(session, text)
    await message.reply(f"<b>‚Üí</b> {translated}")

# ========= Startup =========
async def on_startup(dispatcher: Dispatcher):
    await set_bot_commands()
    logging.info("Bot commands set.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
